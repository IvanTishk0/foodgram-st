services:
  db:
    image: postgres:16-alpine
    container_name: foodgram_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env # Путь к .env относительно docker-compose.yml в infra/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Можно убрать, если доступ к БД нужен только из контейнеров
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../backend # Путь к Dockerfile бэкенда относительно infra/
      dockerfile: Dockerfile
    container_name: foodgram_backend
    restart: always
    volumes:
      - static_volume:/app/static # Для статики Django (админка)
      - media_volume:/app/media   # Для медиафайлов Django (аватары)
      - ../data:/app/data 
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env # Путь к .env относительно docker-compose.yml в infra/
    environment:
      DJANGO_SECRET_KEY: ${SECRET_KEY}
      DJANGO_DEBUG: ${DEBUG:-False}
      # Если вы настроили DJANGO_ALLOWED_HOSTS в settings.py:
      # DJANGO_ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST:-db} # db - имя сервиса БД
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    command: >
      bash -c "python manage.py migrate --noinput &&
               echo '=== Проверка наличия ингредиентов ===' &&
               INGREDIENTS_COUNT=$$(python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'foodgram.settings'); import django; django.setup(); from recipes.models import Ingredient; print(Ingredient.objects.count())\") &&
               echo \"Ингредиентов в базе: $$INGREDIENTS_COUNT\" &&
               if [ \"$$INGREDIENTS_COUNT\" -eq \"0\" ]; then
                 echo 'Загружаем ингредиенты...' &&
                 python manage.py load_ingredients &&
                 NEW_COUNT=$$(python -c \"import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'foodgram.settings'); import django; django.setup(); from recipes.models import Ingredient; print(Ingredient.objects.count())\") &&
                 echo \"Загружено ингредиентов: $$NEW_COUNT\";
               else
                 echo 'Ингредиенты уже загружены';
               fi &&
               python manage.py collectstatic --noinput &&
               gunicorn foodgram.wsgi:application --bind 0.0.0.0:8000"

  frontend:
    build:
      context: ../frontend # Путь к Dockerfile фронтенда относительно infra/
      dockerfile: Dockerfile
    container_name: foodgram_frontend
    restart: always
    volumes:
      - static_volume:/var/www/static/
      - media_volume:/var/www/media/
    ports:
      - "80:80" # Или 8000:80, если порт 80 занят локально
    depends_on:
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume: 